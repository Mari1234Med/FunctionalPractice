
1. Функциональная практика

1. Написать программу cat не ограничивая кол-ва файлов-аргументов;
2. Написать «вечный» генератор, который выдаёт всё время одно значение;
3. Написать собственную реализацию xrange().
4. Написать собственную реализацию zip();
5. Написать функцию, которая на вход принимает словарь, и возвращает словарь,
 в котором ключи со значениями поменяны местами. В случае если это невозможно
 сделать - выводит об этом сообщение.
6. Написать короткие функции, принимающие один аргумент - список чисел,
 и возвращающие:
Список квадратов чисел;
Каждый второй элемент списка;
Квадраты чётных элементов на нечётных позициях.

PEP-8 и остальные PEP’ы к соблюдению обязательны. Обязательно использовать pylint и flake8 перед коммитами.


2. Консольное приложение для парсинга.
Дан файл с логами веб-сервера. Требуется проанализировать данный файл и выдать:
1) 10 клиентов данного сервера запросивших самое большое количество страниц в порядке убывания количества запрошенных страниц
2) 5 самых популярных платформ(ОС) для запуска программ просмотра веб-страниц в порядке убывания популярности
Программы должна уметь работать с файлами больших объемов и корректно обрабатывать все случаи ошибок.


3. Консольное приложение с использованием requests.

1 часть:
Изучить библиотеки lxml, requests, приложение fiddler (установить на локальную машину),
 технологию xpath.

Исследовать поисковые запросы сайта авиакомпании www.airblue.com с помощью fiddler.

Написать приложение на python для вывода информации о полётах.

Главная функция приложения принимает 3-4 параметра командной строки:

IATA-код откуда летим;
IATA-код куда летим;
Дата вылета;*
Дата возврата. Необязательный параметр. Если не задан, произвести поиск в одном направлении (one-way);

*Дата вылета лучше указывать не раньше Августа, т.к. полетов сейчас не очень много в ближайшие месяцы.
Для этого стоит сделать проверку вводимой даты и если проверка не проходит, сообщать юзеру, что нужно указывать с Августа.

Главная функция должна вызывать дочерние функции по мере необходимости, и корректно обрабатывать возникающие ошибки.
Приложение должно быть логически структурировано, каждая функция должна выполнять свою задачу, и быть настолько простой,
 насколько это возможно.

Если были заданы некорректные параметры поиска - вывести сообщение об ошибке с указанием некорректных параметров,
предложить ввести их заново. Иначе произвести поиск по заданным параметрам.

В случае если для заданных машрута и дат найдены результаты, приложение пишет в стандартный вывод информацию о полётах:

Точное время вылета и прилёта;
Длительность перелёта;
Варианты цен с указанием валюты и класса.

Вся информация должна быть извлечена со страницы с результатами поиска, включая валюту. В случае return полёта
необходимо сформировать все возможные комбинации, указать классы, вывести конечную стоимость перелёта туда-обратно.
Варианты должны быть отсортированы по цене.

2 часть:
После того, как скрапер написан и гарантированно работоспособен - прикручиваем дополнительный функционал:

Маршруты IATA кодов хранятся в SQLite, таблица имеет следующие поля:  Route ID(pk, integer),
DEPART IATA(string(3)), ARRIVE IATA(string(3)), FLIGHT SCHEDULE(string(7))
FLIGHT SCHEDULE имеет формат ‘+--++--‘ и означает, что вылеты из аэропорта осуществляются компанией в те дни недели,
которым соответствует «+». В данном случае, понедельник, четверг и пятницу;
Выполняется проверка кодов и дат в СУБД. Если информации о коде или дате нет в БД, выполняет запрос на сайт,
 сохраняет в базу. При несоответствии выводится ошибка, и функция завершает работу. Коды ошибок должны быть различимы,
 т.е. неверная дата вылета(прилета) или неверный IATA код вылета(прилета);


Требования:

Вынесенная в отдельный скрипт или встроенная процедура по созданию БД в случае первого запуска (отсутствия БД);

Ошибки ввода должны обрабатываться гладко, выводя уведомление и предлагая пользователю ввести корректные данные;

Обязательно использование линтеров.